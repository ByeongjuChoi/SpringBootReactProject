{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace_OtherProject\\\\project\\\\src\\\\main\\\\webapp\\\\src\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n  const [id, setId] = useState(\"\");\n  /*\t\r\n  \tuseEffect(() => {\r\n  \t\taxios.get(\"http://localhost:8080/api/message\")\r\n  \t\t\t.then(response => {\r\n  \t\t\t\tsetMessage(response.data);\r\n  \t\t\t})\r\n  \t\t\t.catch(error => {\r\n  \t\t\t\tconsole.error(\"Error: \", error);\r\n  \t\t\t});\r\n  \t}, []);\r\n  */\n\n  // 회원가입 api 호출\n  const entryMemner = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/api/v1/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: id\n        })\n      });\n      if (response.ok) {\n        console.log('Comment updated successfully');\n        fetchComments(); // 댓글 목록 다시 가져오기\n      } else {\n        console.error('Failed to update comment');\n      }\n    } catch (error) {\n      console.error('Error while updating comment:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), \"ID: \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: id,\n      onChange: e => setId(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: 회원가입,\n      onClick: entryMemner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n}\n_s(Login, \"4S2lHYDXZu1kPqeM+OaM1T6vczM=\");\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Login","_s","id","setId","entryMemner","response","fetch","method","headers","body","JSON","stringify","ok","console","log","fetchComments","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","회원가입","onClick","_c","$RefreshReg$"],"sources":["C:/workspace_OtherProject/project/src/main/webapp/src/Login.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport default function Login() {\r\n\tconst [id, setId] = useState(\"\");\r\n/*\t\r\n\tuseEffect(() => {\r\n\t\taxios.get(\"http://localhost:8080/api/message\")\r\n\t\t\t.then(response => {\r\n\t\t\t\tsetMessage(response.data);\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.error(\"Error: \", error);\r\n\t\t\t});\r\n\t}, []);\r\n*/\t\r\n\r\n\t// 회원가입 api 호출\r\n    const entryMemner = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/api/v1/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    id: id,\r\n                }),\r\n            });\r\n            if (response.ok) {\r\n                console.log('Comment updated successfully');\r\n                fetchComments(); // 댓글 목록 다시 가져오기\r\n            } else {\r\n                console.error('Failed to update comment');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error while updating comment:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Login Page</h1>\r\n\t\t\tID: <input type=\"text\" value={id} onChange={(e) => setId(e.target.value)} />\r\n\t\t\t<button value={회원가입} onClick={entryMemner}/>\r\n\t\t</div>\r\n\t)\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;EACG,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBT,EAAE,EAAEA;QACR,CAAC;MACL,CAAC,CAAC;MACF,IAAIG,QAAQ,CAACO,EAAE,EAAE;QACbC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;QAC3CC,aAAa,CAAC,CAAC,CAAC,CAAC;MACrB,CAAC,MAAM;QACHF,OAAO,CAACG,KAAK,CAAC,0BAA0B,CAAC;MAC7C;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACzD;EACJ,CAAC;EAIJ,oBACCjB,OAAA;IAAAkB,QAAA,gBACClB,OAAA;MAAAkB,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,QACf,eAAAtB,OAAA;MAAOuB,IAAI,EAAC,MAAM;MAACC,KAAK,EAAErB,EAAG;MAACsB,QAAQ,EAAGC,CAAC,IAAKtB,KAAK,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5EtB,OAAA;MAAQwB,KAAK,EAAEI,IAAK;MAACC,OAAO,EAAExB;IAAY;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAER;AAACpB,EAAA,CA9CuBD,KAAK;AAAA6B,EAAA,GAAL7B,KAAK;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}